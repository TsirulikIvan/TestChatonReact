{"version":3,"sources":["logo.svg","Components/Chat.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Chat","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","name","msg","messages","onChangedName","bind","assertThisInitialized","onChangedMSG","socket","io","sendMessage","addMessage","seeHistory","on","data","setState","event","target","value","concat","ev","preventDefault","emit","author","msg_text","_React$createElement","react_default","a","createElement","className","map","message","id","onSubmit","type","required","onChange","defineProperty","React","Component","Title","App","App_Title","Components_Chat","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d53cee66.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport io from \"socket.io-client\";\r\n\r\n\r\nclass Chat extends React.Component{\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {name:'', msg:'', messages : []};\r\n    this.onChangedName = this.onChangedName.bind(this);\r\n    this.onChangedMSG = this.onChangedMSG.bind(this);\r\n    this.socket = io();\r\n    this.sendMessage = this.sendMessage.bind(this);\r\n    this.addMessage = this.addMessage.bind(this);\r\n    this.seeHistory = this.seeHistory.bind(this);\r\n    this.socket.on('RECEIVE_MESSAGE' , (data) => {\r\n        this.addMessage(data);\r\n    });\r\n\r\n    this.socket.on('RECEIVE_ALL_MESSAGE' , (data) => {\r\n        this.setState({messages : data});\r\n    });\r\n};\r\n\r\n  onChangedName(event){\r\n    this.setState({name: event.target.value});\r\n  };\r\n\r\n  onChangedMSG(event){\r\n    this.setState({msg: event.target.value});\r\n  };\r\n\r\n  addMessage(data){\r\n    this.setState({messages : this.state.messages.concat(data)});\r\n  };\r\n\r\n\r\n  sendMessage(ev){\r\n  ev.preventDefault();\r\n  this.socket.emit('SEND_MESSAGE', {\r\n      author: this.state.name,\r\n      msg_text: this.state.msg\r\n        })\r\n\r\n  this.setState({msg: ''});\r\n};\r\n\r\nseeHistory(){\r\n  this.socket.emit('SEND_ALL_MESSAGE');\r\n}\r\n  render()\r\n  {\r\n    return(\r\n      <div>\r\n      <ul className=\"message-list\">\r\n      {\r\n        this.state.messages.map(message => {\r\n        return (\r\n          <li className=\"message\">\r\n          <div>{message.author}</div>\r\n          <div>{message.msg_text}</div></li>\r\n        )\r\n      })\r\n    }\r\n    </ul>\r\n\r\n    <div id='footer'>\r\n      <form className=\"send-message-form\" onSubmit={this.sendMessage}>\r\n        <label> Введите ваше имя:\r\n            <input type='text' required value={this.state.name} id='name' onChange={this.onChangedName}/>\r\n        </label>\r\n        <label>    Введите ваше сообщение:\r\n            <input id=\"m\" required type='text' value={this.state.msg} id='name' onChange={this.onChangedMSG}/>\r\n        </label>\r\n        <input type=\"submit\" value=\"Отправить\" id='sendBTN'/>\r\n      </form>\r\n      </div>\r\n      </div>\r\n)};\r\n};\r\n\r\n\r\nexport default Chat\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Chat from './Components/Chat';\n\n\nlet Title = (props) => {\n  return(\n    <p className=\"title\">Тестовое задание</p>\n  )\n}\n\n\nclass App  extends React.Component{\n  constructor(props){\n    super(props);\n\n  }\n  render() {\n    return (\n    <div className=\"app\">\n          <Title />\n        <Chat />\n    </div>\n  )}\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}